<?php

use Weglot\Client\Factory\Languages;
use Weglot\Client\Api\TranslateEntry;
use Weglot\Client\Api\WordEntry;
use Weglot\Client\Client;
use Weglot\Client\Endpoint\Translate;
use Weglot\Client\Api\Enum\BotType;
use Weglot\Client\Api\Enum\WordType;
use Weglot\Util\Url;
use Weglot\Util\Server;
use Weglot\Parser\Parser;
use Weglot\Parser\ConfigProvider\ManualConfigProvider;
use Weglot\Parser\ConfigProvider\ServerConfigProvider;

define('WEGLOT_VERSION', '1.4');

/**
 * Helper function
 *
 * @return array
 */
function get_code_original_destination_language()
{
    global $language;
    $originalLanguage = language_default();

    $codeOriginalLanguage    = $originalLanguage->language;
    $codeDestinationLanguage = $language->language;

    return array(
        'original' => $codeOriginalLanguage,
        'destination' => $codeDestinationLanguage
    );
}

/**
 * Get Weglot URL Object
 *
 * @return Weglot\Util\Url
 */
function weglot_get_url_object()
{
    $codeLanguages = get_code_original_destination_language();
    $destinationLanguages  = locale_language_list();


    if (array_key_exists($codeLanguages['original'], $destinationLanguages)) {
        unset($destinationLanguages[$codeLanguages['original']]);
    }
    $destinationLanguages = array_keys($destinationLanguages);

    $weglotUrl = new Url(
      Server::fullUrl($_SERVER),
      $codeLanguages['original'],
      $destinationLanguages
    );

    $excludeUrls = variable_get("weglot_exclude_url", "");
    if (empty($excludeUrls)) {
        $excludeUrls = array();
    }

    $weglotUrl->setExcludedUrls($excludeUrls);

    return $weglotUrl;
}


ob_start('weglot_treat_page');

/**
 * Parse and translate DOM
 *
 * @param string $dom
 * @return string
 */
function weglot_treat_page($dom)
{
    if (empty($dom) || arg(0) === "admin") { // Empty or only front
        return prepare_render_treat_page($dom);
    }

    $apiKey = variable_get("weglot_api_key", '');

    if (!$apiKey) {
        return prepare_render_treat_page($dom);
    }

    $codeLanguages = get_code_original_destination_language();

    $weglotUrl = weglot_get_url_object();

    $paramsTreatPage = array();

    if ($weglotUrl->isTranslable()) {
        $paramsTreatPage["widget"] =  widget_html();
    }

    if ($codeLanguages["destination"] === $codeLanguages["original"]) {
        return prepare_render_treat_page($dom, $paramsTreatPage);
    }

    if (!$weglotUrl->isTranslable()) {
        drupal_goto($currentUrlNoLanguage);
        return;
    }

    $client = new Client($apiKey);
    $config = new ServerConfigProvider();

    $excludeBlocks  = array("#toolbar","#overlay", ".page-admin", "#comment-body-add-more-wrapper");

    $optionsExcludeBlocks = variable_get("weglot_exclude_blocks", '');
    $optionsExcludeBlocks = explode(",", $optionsExcludeBlocks);
    $excludeBlocks = array_merge($excludeBlocks, $optionsExcludeBlocks);

    $parser = new Parser($client, $config, $excludeBlocks);

    $content =  $parser->translate($dom, $codeLanguages["original"], $codeLanguages["destination"]);

    return prepare_render_treat_page($content, $paramsTreatPage);
}

/**
 * Render treat page
 *
 * @param string $dom
 * @param array $params
 * @return string
 */
function prepare_render_treat_page($dom, $params = array())
{
    if (isset($params["widget"])) {
        return str_replace('</body>', $params["widget"] . '</body>', $dom);
    }

    return $dom;
}

/**
 * Impletation of hook_preprocess_page
 *
 * @return void
 */
function weglot_preprocess_page(&$vars, $hook)
{
    if (arg(0) !== "admin") { // Only front
        drupal_add_js(drupal_get_path('module', 'weglot') . '/weglot-front.js');
        drupal_add_css(drupal_get_path('module', 'weglot') . '/weglot-front.css');
    }
}


/**
 * Implementation of hook_permission().
 */
function weglot_permission()
{
    return array(
        'access weglot' => array('title' => t('Access weglot'))
    );
}

/**
 * Implementation of hook_block_info()
 */
function weglot_block_info()
{
    $block['weglot'] = array(
        'info' => t('Block info de weglot')
    );

    return $block;
}

/**
 * Implementation of hook_menu().
 */
function weglot_menu()
{
    $items = array();

    $items['admin/settings/weglot'] = array(
        'title' => 'Weglot',
        'description' => 'Weglot module settings control',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('admin_weglot'),
        'access arguments' => array('Modify Weglot settings'),
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

/**
 * Implementation of hook_preprocess_html
 */
function weglot_preprocess_html(&$variables)
{
    // Add conditional stylesheets for admin pages on admin theme.
    if (arg(0)=="admin") {
        // reference your own stylesheet
        drupal_add_css(drupal_get_path('module', 'weglot') . '/weglot.css');
        drupal_add_js(drupal_get_path('module', 'weglot') . '/weglot.js');
    }
}


/**
 * Callback from weglot_menu
 */
function admin_weglot()
{
    $form['general'] = array(
        '#type' => 'fieldset',
        '#title' => t('General Configuration'),
        '#collapsible' => false,
        '#collapsed' => false,
    );

    $form['general']['weglot_api_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Api Key'),
        '#default_value' => variable_get('weglot_api_key', ''),
        '#description' => t("Log in to <a target='_blank' href='https://weglot.com/register-wordpress
'>Weglot</a> to get your API key."),
        '#required' => true
    );

    $form['exclusion'] = array(
        '#type' => 'fieldset',
        '#title' => t('Translation exclusion (optional)'),
        '#description' => t('By default, every page is translated. You can exclude parts of a page or a full page here.'),
        '#collapsible' => true,
        '#collapsed' => false,
    );

    $form['exclusion']['weglot_exclude_url'] = array(
        '#type' => 'textarea',
        '#title' => 'Exclude URL here',
        '#description' => t('You can write regex.'),
        '#default_value' => variable_get('weglot_exclude_url', '')
    );

    $form['exclusion']['weglot_exclude_blocks'] = array(
        '#type' => 'textarea',
        '#title' => 'Exclude blocks',
        '#description' => t('Enter CSS selectors, separated by commas.'),
        '#default_value' => variable_get('weglot_exclude_blocks', '')
    );


    return system_settings_form($form);
}

/**
 * Get widget selector
 *
 * @return string
 */
function widget_html()
{
    $codeLanguages = get_code_original_destination_language();
    $isDropdown    = true;
    $flagClass     = 'wg-flags ';
    $tag           = $isDropdown ? 'div' : 'li';
    $listTag       = $isDropdown ? '<ul>' : '';

    $widget = sprintf('<!--Weglot %s-->', WEGLOT_VERSION);
    $widget .= "<aside data-wg-notranslate='' id='weglot-selector' class='wg-default wg-drop country-selector closed'>";

    $weglotUrl = weglot_get_url_object();
    $listLanguages = locale_language_list();
    $widget .= sprintf('<%s data-wg-notranslate="" class="wgcurrent wg-li wg-flags %s"><a href="#" onclick="return false;">%s</a></%s>', $tag, $codeLanguages["destination"], $listLanguages[$codeLanguages["destination"]], $tag);

    $widget .= $listTag;
    foreach ($listLanguages as $keyCode => $lang) {
        if ($keyCode === $codeLanguages['destination']) {
            continue;
        }

        $widget .= sprintf('<li class="wg-li %s">', $flagClass . $keyCode);
        $urlSwitch = $weglotUrl->getForLanguage($keyCode);
        $widget .= sprintf('<a data-wg-notranslate href="%s">%s</a>', $urlSwitch, $listLanguages[$keyCode]);

        $widget .= '</li>';
    }
    $widget .= $listTag;

    $widget .= "</aside>";

    return $widget;
}
