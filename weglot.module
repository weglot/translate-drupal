<?php
/**
 * @file
 * Weglot translate
 */

use Drupal;
use Drupal\Core\Routing\RouteMatchInterface;


use Weglot\Client\Factory\Languages;
use Weglot\Client\Api\TranslateEntry;
use Weglot\Client\Api\WordEntry;
use Weglot\Client\Client;
use Weglot\Client\Endpoint\Translate;
use Weglot\Client\Api\Enum\BotType;
use Weglot\Client\Api\Enum\WordType;
use Weglot\Util\Url;
use Weglot\Util\Server;
use Weglot\Parser\Parser;
use Weglot\Parser\ConfigProvider\ManualConfigProvider;
use Weglot\Parser\ConfigProvider\ServerConfigProvider;

define('WEGLOT_VERSION', '1.0');

if(!class_exists('Weglot\Util\Url')){
  require_once __DIR__ . '/vendor/autoload.php';
}


/**
 * Helper function
 *
 * @return array
 *   An array with original and destination language available
 */
function get_code_original_destination_language() {
  return array(
      'original' => Drupal::languageManager()->getDefaultLanguage(),
      'destination' => Drupal::languageManager()->getCurrentLanguage()
  );
}


/**
 * Render treat page
 *
 * @param string $dom
 *   DOM you want render
 * @param array $params
 *   Params use for change the DOM. Like a widget selector
 * @return string
 *   The new DOM with the changes
 */
function prepare_render_treat_page($dom, $params = array())
{
    if (isset($params["widget"])) {
        return str_replace('</body>', $params["widget"] . '</body>', $dom);
    }

    return $dom;
}

ob_start('weglot_treat_page');

/**
 * Parse and translate DOM
 *
 * @param string $dom
 *    Current DOM
 * @return string
 *    DOM Translated
 */
function weglot_treat_page($dom)
{
    $api_key = Drupal::config('weglot.settings')->get('weglot_api_key');

    if (!$api_key) {
        return prepare_render_treat_page($dom);
    }


    $original_and_destination = get_code_original_destination_language();

     $route = \Drupal::routeMatch()->getRouteObject();
    $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

    if (empty($dom) || $is_admin) { // Empty or only front
        return prepare_render_treat_page($dom);
    }

    $weglot_url = weglot_get_url_object();

    $params_treat_page = array();

    if ($weglot_url->isTranslable()) {
        $params_treat_page["widget"] =  widget_html();
    }

    if ($original_and_destination["destination"]->getId() === $original_and_destination["original"]->getId()) {
        return prepare_render_treat_page($dom, $params_treat_page);
    }

    // if (!$weglot_url->isTranslable()) {
    //     drupal_goto($weglot_url->getForLanguage($code_languages["original"]));
    //     return;
    // }

    $client = new Client($api_key);
    $config = new ServerConfigProvider();

    $exclude_blocks  = array("#toolbar", "#overlay", ".page-admin", "#comment-body-add-more-wrapper");

    $options_exclude_blocks = Drupal::config('weglot.settings')->get('weglot_exclude_blocks');
    $options_exclude_blocks = explode(",", $options_exclude_blocks);
    $exclude_blocks = array_merge($exclude_blocks, $options_exclude_blocks);

    $parser = new Parser($client, $config, $exclude_blocks);

    $content =  $parser->translate($dom, $original_and_destination["original"]->getId(), $original_and_destination["destination"]->getId());

    return prepare_render_treat_page($content, $params_treat_page);
}


/**
 * Implements hook_help().
 */
function weglot_help($route_name, RouteMatchInterface $route_match)
{
    switch ($route_name) {
    case 'help.page.weglot':
      $output = '<h3>' . t('Weglot Resources') . '</h3>';
      $output .= '<ul class="links">';
      $output .= '<li><a href="https://weglot.com/documentation/" target="_blank">Weglot Documentation</a></li>';
      $output .= '<li><a href="https://developers.weglot.com/" target="_blank">Weglot developers</a></li>';
      $output .= '</ul>';
      return $output;
  }
}


/**
 * Implements hook_permission().
 */
function weglot_permission()
{
    return array(
      'weglot settings' => array(
      'title' => t('Access weglot'),
      ),
    );
}

function get_list_code_languages(){
   $languages  =  Drupal::languageManager()->getLanguages();

    $destination_languages = [];
    foreach ($languages as $language) {
        $destination_languages[] = $language->getId();
    }

    return $destination_languages;
}

/**
 * Get Weglot URL Object
 *
 * @return Weglot\Util\Url
 *   It is an object define if an URL is translable
 */
function weglot_get_url_object()
{
    $code_languages = get_code_original_destination_language();
    $destination_languages = get_list_code_languages();

    $pos = array_search($code_languages['original']->getId(), $destination_languages);
    if ($pos >= 0) {
        unset($destination_languages[$pos]);
    }

    $weglot_url = new Url(
      Server::fullUrl($_SERVER),
      $code_languages['original']->getId(),
      $destination_languages
    );

    $exclude_urls = Drupal::config('weglot.settings')->get('weglot_exclude_url');
    if (empty($exclude_urls)) {
        $exclude_urls = array();
    } else {
        $exclude_urls = explode(',', $exclude_urls);
    }

    $weglot_url->setExcludedUrls($exclude_urls);

    return $weglot_url;
}



/**
 * Get widget selector
 *
 * @return string
 *   Return widget selector
 */
function widget_html()
{
    $code_languages = get_code_original_destination_language();
    $is_dropdown    = true;
    $flag_class     = 'wg-flags ';
    $tag            = $is_dropdown ? 'div' : 'li';
    $list_tag       = $is_dropdown ? '<ul>' : '';
    $list_tag_close = $is_dropdown ? '</ul>' : '';

    $widget = sprintf('<!--Weglot %s-->', WEGLOT_VERSION);
    $widget .= "<aside data-wg-notranslate='' id='weglot-selector' class='wg-default wg-drop country-selector closed'>";

    $weglot_url = weglot_get_url_object();
    $list_languages =  Drupal::languageManager()->getLanguages();

    $widget .= sprintf('<%s data-wg-notranslate="" class="wgcurrent wg-li wg-flags %s"><a href="#" onclick="return false;">%s</a></%s>', $tag, $code_languages["destination"]->getId(), 'replace', $tag);

    $widget .= $list_tag;
    foreach ($list_languages as $key => $language) {
        $key_code = $language->getId();
        if ($key_code === $code_languages['destination']->getId()) {
            continue;
        }

        $widget .= sprintf('<li class="wg-li %s">', $flag_class . $key_code);
        $url_switch = $weglot_url->getForLanguage($key_code);
        $widget .= sprintf('<a data-wg-notranslate href="%s">%s</a>', $url_switch, 'replace');

        $widget .= '</li>';
    }
    $widget .= $list_tag_close;

    $widget .= "</aside>";

    return $widget;
}
